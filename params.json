{"name":"Captcha","tagline":"Golang 实现的验证码服务。","body":"## 验证码服务\r\n\r\n目前在 mac centos6.x ubuntu14 上测试通过\r\n\r\n![demo.gif](https://raw.githubusercontent.com/jianxinio/captcha/master/src/captcha/tmp/demo.gif)\r\n\r\n- - -\r\n\r\n#### 准备工作\r\n\r\n依赖安装： `golang` `imagemagic`\r\n\r\n验证成功：\r\n\r\n`pkg-config --cflags --libs MagickWand`\r\n\r\n`go version`\r\n\r\n没有报错说明安装成功\r\n\r\n#### 下载并编译\r\n\r\n`git clone https://github.com/jianxinio/captcha/`\r\n\r\n或者 [下载](https://github.com/jianxinio/captcha/archive/master.zip) 并解压\r\n\r\n\r\n进入captcha文件夹后运行 `source install.sh`\r\n\r\n`Downloading necessary files` 这步可能耗时很久，后面留意观察错误，如果下载完后持续报错可能是 imagemagic 安装有误\r\n\r\n如果一切顺利，可以看到多了一个 build 文件夹，其中\r\n\r\n1. bin 为可执行文件夹\r\n2. assets 为使用到的静态资源文件夹\r\n3. tmp 为缓存验证码文件\r\n\r\n除了 build 文件夹外，其他文件不会再被使用\r\n\r\n#### 启动\r\n\r\n进入到 bin 文件夹，`./captcha` 即可启动。\r\n\r\n见到 `Init success.` 的提示说明初始化缓存生成成功。此时可以在 tmp 文件夹中看到 100 张验证码。\r\n\r\n线上环境请自备守护进程\r\n\r\n#### 程序集成\r\n\r\n访问 localhost:8001 即可见到验证码内容（格式为 base64(buffer)|result）。\r\n\r\n使用时需要先 split('|') 然后将 base64 解密后给前端。\r\n\r\n\tget '/captcha' do\r\n\t  captcha = Faraday.get settings.captcha_server\r\n\t  captcha_arr = captcha.body.split('|')\r\n\t  @session['captcha_result'] = captcha_arr[1]\r\n\t  content_type 'image/gif'\r\n\t  Base64.decode64 captcha.body.split('|')[0]\r\n\tend\r\n\r\n#### 高级配置\r\n\r\nBriefDesign 中有详细的设计文档。\r\n\r\nconfig.json 说明：\r\n\r\n\tinitial_count 初始化时产生的验证码数量\r\n\tcheck_interval 检查使用量间隔\r\n\tthreshold 更新验证码阀值\r\n\tupdate_count 更新的验证码数量\r\n\r\n如果访问量较大，建议提高 initial_count 以及 update_count\r\n\r\n更新配置文件后 reload 操作：\r\n\r\nreload 只支持 initial_count 以及 update_count 的修改\r\n\r\n操作方法： `kill -USR2 pid`\r\n\r\n\r\n#### 开源协议\r\n\r\nMIT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}